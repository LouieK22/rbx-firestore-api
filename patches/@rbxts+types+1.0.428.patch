diff --git a/node_modules/@rbxts/types/include/roblox.d.ts b/node_modules/@rbxts/types/include/roblox.d.ts
index 0f4e0c8..4ae2718 100644
--- a/node_modules/@rbxts/types/include/roblox.d.ts
+++ b/node_modules/@rbxts/types/include/roblox.d.ts
@@ -1687,7 +1687,7 @@ declare namespace utf8 {
 	/** Receives zero or more codepoints as integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences. */
 	function char(this: typeof utf8, ...codepoints: Array<number>): string;
 	/** Returns an iterator function that will iterate over all codepoints in string str. It raises an error if it meets any invalid byte sequence. */
-	function codes(this: typeof utf8, str: string): FirstDecrementedIterableFunction;
+	function codes(this: typeof utf8, str: string): any;
 	/** Returns the codepoints (as integers) from all codepoints in the provided string (str) that start between byte positions i and j (both included). The default for i is 0 and for j is i. It raises an error if it meets any invalid byte sequence. Similar to `string.byte`.*/
 	function codepoint(this: typeof utf8, str: string, i?: number, j?: number): LuaTuple<Array<number>>;
 	/** Returns the number of UTF-8 codepoints in the string str that start between positions i and j (both inclusive). The default for i is 0 and for j is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte. */
@@ -1695,7 +1695,7 @@ declare namespace utf8 {
 	/** Returns the position (in bytes) where the encoding of the n-th codepoint of s (counting from byte position i) starts. A negative n gets characters before position i. The default for i is 0 when n is non-negative and #s + 1 otherwise, so that utf8.offset(s, -n) gets the offset of the n-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns nil. */
 	function offset(this: typeof utf8, s: string, n: number, i?: number): number | undefined;
 	/** Returns an iterator function that will iterate the grapheme clusters of the string. */
-	function graphemes(this: typeof utf8, s: string, i?: number, j?: number): DoubleDecrementedIterableFunction;
+	function graphemes(this: typeof utf8, s: string, i?: number, j?: number): any;
 	/** Converts the input string to Normal Form C, which tries to convert decomposed characters into composed characters. */
 	function nfcnormalize(this: typeof utf8, str: string): string;
 	/** Converts the input string to Normal Form D, which tries to break up composed characters into decomposed characters. */
